
SPI_ATmega32Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000999  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ff  00000000  00000000  00000dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000509  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a8  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000299  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000021f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 16000000UL 
#include "util\delay.h"

int main(void)
{	
	M_DIO_Void_SetPinDirection(SS,INPUT);
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	88 e1       	ldi	r24, 0x18	; 24
  70:	0e 94 59 00 	call	0xb2	; 0xb2 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(SS,HIGH);
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	88 e1       	ldi	r24, 0x18	; 24
  78:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinDirection(MISO,INPUT);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	8a e1       	ldi	r24, 0x1A	; 26
  80:	0e 94 59 00 	call	0xb2	; 0xb2 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(MOSI,OUTPUT);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	89 e1       	ldi	r24, 0x19	; 25
  88:	0e 94 59 00 	call	0xb2	; 0xb2 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SCK,OUTPUT);	
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	8b e1       	ldi	r24, 0x1B	; 27
  90:	0e 94 59 00 	call	0xb2	; 0xb2 <M_DIO_Void_SetPinDirection>
	/*Initiate SPI in Master Mode*/  
	M_Void_SPI_MasterInit();
  94:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <M_Void_SPI_MasterInit>
    while (1) 
    {
			M_U8_SPI_TransmitRecieve('A');
  98:	81 e4       	ldi	r24, 0x41	; 65
  9a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <M_U8_SPI_TransmitRecieve>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	89 e6       	ldi	r24, 0x69	; 105
  a2:	98 e1       	ldi	r25, 0x18	; 24
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
  b0:	f3 cf       	rjmp	.-26     	; 0x98 <main+0x2c>

000000b2 <M_DIO_Void_SetPinDirection>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
  b2:	9d ec       	ldi	r25, 0xCD	; 205
  b4:	89 9f       	mul	r24, r25
  b6:	91 2d       	mov	r25, r1
  b8:	11 24       	eor	r1, r1
  ba:	29 2f       	mov	r18, r25
  bc:	26 95       	lsr	r18
  be:	26 95       	lsr	r18
  c0:	26 95       	lsr	r18
  c2:	22 0f       	add	r18, r18
  c4:	32 2f       	mov	r19, r18
  c6:	33 0f       	add	r19, r19
  c8:	33 0f       	add	r19, r19
  ca:	23 0f       	add	r18, r19
  cc:	82 1b       	sub	r24, r18
  ce:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
  d0:	96 95       	lsr	r25
  d2:	96 95       	lsr	r25
  d4:	96 95       	lsr	r25
	switch(Copy_U8_State)
  d6:	66 23       	and	r22, r22
  d8:	19 f0       	breq	.+6      	; 0xe0 <M_DIO_Void_SetPinDirection+0x2e>
  da:	61 30       	cpi	r22, 0x01	; 1
  dc:	e1 f1       	breq	.+120    	; 0x156 <M_DIO_Void_SetPinDirection+0xa4>
  de:	08 95       	ret
	{
	case INPUT:
		switch(Local_U8_Group)
  e0:	92 30       	cpi	r25, 0x02	; 2
  e2:	a9 f0       	breq	.+42     	; 0x10e <M_DIO_Void_SetPinDirection+0x5c>
  e4:	18 f4       	brcc	.+6      	; 0xec <M_DIO_Void_SetPinDirection+0x3a>
  e6:	91 30       	cpi	r25, 0x01	; 1
  e8:	31 f0       	breq	.+12     	; 0xf6 <M_DIO_Void_SetPinDirection+0x44>
  ea:	08 95       	ret
  ec:	93 30       	cpi	r25, 0x03	; 3
  ee:	d9 f0       	breq	.+54     	; 0x126 <M_DIO_Void_SetPinDirection+0x74>
  f0:	94 30       	cpi	r25, 0x04	; 4
  f2:	29 f1       	breq	.+74     	; 0x13e <M_DIO_Void_SetPinDirection+0x8c>
  f4:	08 95       	ret
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
  f6:	3a b3       	in	r19, 0x1a	; 26
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <M_DIO_Void_SetPinDirection+0x50>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	2a 95       	dec	r18
 104:	e2 f7       	brpl	.-8      	; 0xfe <M_DIO_Void_SetPinDirection+0x4c>
 106:	80 95       	com	r24
 108:	83 23       	and	r24, r19
 10a:	8a bb       	out	0x1a, r24	; 26
 10c:	08 95       	ret
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
 10e:	37 b3       	in	r19, 0x17	; 23
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <M_DIO_Void_SetPinDirection+0x68>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	2a 95       	dec	r18
 11c:	e2 f7       	brpl	.-8      	; 0x116 <M_DIO_Void_SetPinDirection+0x64>
 11e:	80 95       	com	r24
 120:	83 23       	and	r24, r19
 122:	87 bb       	out	0x17, r24	; 23
 124:	08 95       	ret
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
 126:	34 b3       	in	r19, 0x14	; 20
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <M_DIO_Void_SetPinDirection+0x80>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	2a 95       	dec	r18
 134:	e2 f7       	brpl	.-8      	; 0x12e <M_DIO_Void_SetPinDirection+0x7c>
 136:	80 95       	com	r24
 138:	83 23       	and	r24, r19
 13a:	84 bb       	out	0x14, r24	; 20
 13c:	08 95       	ret
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
 13e:	31 b3       	in	r19, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <M_DIO_Void_SetPinDirection+0x98>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	2a 95       	dec	r18
 14c:	e2 f7       	brpl	.-8      	; 0x146 <M_DIO_Void_SetPinDirection+0x94>
 14e:	80 95       	com	r24
 150:	83 23       	and	r24, r19
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
 156:	92 30       	cpi	r25, 0x02	; 2
 158:	a1 f0       	breq	.+40     	; 0x182 <M_DIO_Void_SetPinDirection+0xd0>
 15a:	18 f4       	brcc	.+6      	; 0x162 <M_DIO_Void_SetPinDirection+0xb0>
 15c:	91 30       	cpi	r25, 0x01	; 1
 15e:	31 f0       	breq	.+12     	; 0x16c <M_DIO_Void_SetPinDirection+0xba>
 160:	08 95       	ret
 162:	93 30       	cpi	r25, 0x03	; 3
 164:	c9 f0       	breq	.+50     	; 0x198 <M_DIO_Void_SetPinDirection+0xe6>
 166:	94 30       	cpi	r25, 0x04	; 4
 168:	11 f1       	breq	.+68     	; 0x1ae <M_DIO_Void_SetPinDirection+0xfc>
 16a:	08 95       	ret
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
 16c:	3a b3       	in	r19, 0x1a	; 26
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <M_DIO_Void_SetPinDirection+0xc6>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	2a 95       	dec	r18
 17a:	e2 f7       	brpl	.-8      	; 0x174 <M_DIO_Void_SetPinDirection+0xc2>
 17c:	83 2b       	or	r24, r19
 17e:	8a bb       	out	0x1a, r24	; 26
 180:	08 95       	ret
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
 182:	37 b3       	in	r19, 0x17	; 23
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <M_DIO_Void_SetPinDirection+0xdc>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	2a 95       	dec	r18
 190:	e2 f7       	brpl	.-8      	; 0x18a <M_DIO_Void_SetPinDirection+0xd8>
 192:	83 2b       	or	r24, r19
 194:	87 bb       	out	0x17, r24	; 23
 196:	08 95       	ret
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
 198:	34 b3       	in	r19, 0x14	; 20
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <M_DIO_Void_SetPinDirection+0xf2>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	2a 95       	dec	r18
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <M_DIO_Void_SetPinDirection+0xee>
 1a8:	83 2b       	or	r24, r19
 1aa:	84 bb       	out	0x14, r24	; 20
 1ac:	08 95       	ret
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
 1ae:	31 b3       	in	r19, 0x11	; 17
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <M_DIO_Void_SetPinDirection+0x108>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	2a 95       	dec	r18
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <M_DIO_Void_SetPinDirection+0x104>
 1be:	83 2b       	or	r24, r19
 1c0:	81 bb       	out	0x11, r24	; 17
 1c2:	08 95       	ret

000001c4 <M_DIO_Void_SetPinValue>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
 1c4:	9d ec       	ldi	r25, 0xCD	; 205
 1c6:	89 9f       	mul	r24, r25
 1c8:	91 2d       	mov	r25, r1
 1ca:	11 24       	eor	r1, r1
 1cc:	29 2f       	mov	r18, r25
 1ce:	26 95       	lsr	r18
 1d0:	26 95       	lsr	r18
 1d2:	26 95       	lsr	r18
 1d4:	22 0f       	add	r18, r18
 1d6:	32 2f       	mov	r19, r18
 1d8:	33 0f       	add	r19, r19
 1da:	33 0f       	add	r19, r19
 1dc:	23 0f       	add	r18, r19
 1de:	82 1b       	sub	r24, r18
 1e0:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
 1e2:	96 95       	lsr	r25
 1e4:	96 95       	lsr	r25
 1e6:	96 95       	lsr	r25
	switch(Copy_U8_State)
 1e8:	66 23       	and	r22, r22
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <M_DIO_Void_SetPinValue+0x2e>
 1ec:	61 30       	cpi	r22, 0x01	; 1
 1ee:	e1 f1       	breq	.+120    	; 0x268 <M_DIO_Void_SetPinValue+0xa4>
 1f0:	08 95       	ret
	{
	case LOW:
		switch(Local_U8_Group)
 1f2:	92 30       	cpi	r25, 0x02	; 2
 1f4:	a9 f0       	breq	.+42     	; 0x220 <M_DIO_Void_SetPinValue+0x5c>
 1f6:	18 f4       	brcc	.+6      	; 0x1fe <M_DIO_Void_SetPinValue+0x3a>
 1f8:	91 30       	cpi	r25, 0x01	; 1
 1fa:	31 f0       	breq	.+12     	; 0x208 <M_DIO_Void_SetPinValue+0x44>
 1fc:	08 95       	ret
 1fe:	93 30       	cpi	r25, 0x03	; 3
 200:	d9 f0       	breq	.+54     	; 0x238 <M_DIO_Void_SetPinValue+0x74>
 202:	94 30       	cpi	r25, 0x04	; 4
 204:	29 f1       	breq	.+74     	; 0x250 <M_DIO_Void_SetPinValue+0x8c>
 206:	08 95       	ret
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
 208:	3b b3       	in	r19, 0x1b	; 27
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <M_DIO_Void_SetPinValue+0x50>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	2a 95       	dec	r18
 216:	e2 f7       	brpl	.-8      	; 0x210 <M_DIO_Void_SetPinValue+0x4c>
 218:	80 95       	com	r24
 21a:	83 23       	and	r24, r19
 21c:	8b bb       	out	0x1b, r24	; 27
 21e:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
 220:	38 b3       	in	r19, 0x18	; 24
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <M_DIO_Void_SetPinValue+0x68>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	2a 95       	dec	r18
 22e:	e2 f7       	brpl	.-8      	; 0x228 <M_DIO_Void_SetPinValue+0x64>
 230:	80 95       	com	r24
 232:	83 23       	and	r24, r19
 234:	88 bb       	out	0x18, r24	; 24
 236:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
 238:	35 b3       	in	r19, 0x15	; 21
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <M_DIO_Void_SetPinValue+0x80>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	2a 95       	dec	r18
 246:	e2 f7       	brpl	.-8      	; 0x240 <M_DIO_Void_SetPinValue+0x7c>
 248:	80 95       	com	r24
 24a:	83 23       	and	r24, r19
 24c:	85 bb       	out	0x15, r24	; 21
 24e:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
 250:	32 b3       	in	r19, 0x12	; 18
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <M_DIO_Void_SetPinValue+0x98>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	2a 95       	dec	r18
 25e:	e2 f7       	brpl	.-8      	; 0x258 <M_DIO_Void_SetPinValue+0x94>
 260:	80 95       	com	r24
 262:	83 23       	and	r24, r19
 264:	82 bb       	out	0x12, r24	; 18
 266:	08 95       	ret
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
 268:	92 30       	cpi	r25, 0x02	; 2
 26a:	a1 f0       	breq	.+40     	; 0x294 <M_DIO_Void_SetPinValue+0xd0>
 26c:	18 f4       	brcc	.+6      	; 0x274 <M_DIO_Void_SetPinValue+0xb0>
 26e:	91 30       	cpi	r25, 0x01	; 1
 270:	31 f0       	breq	.+12     	; 0x27e <M_DIO_Void_SetPinValue+0xba>
 272:	08 95       	ret
 274:	93 30       	cpi	r25, 0x03	; 3
 276:	c9 f0       	breq	.+50     	; 0x2aa <M_DIO_Void_SetPinValue+0xe6>
 278:	94 30       	cpi	r25, 0x04	; 4
 27a:	11 f1       	breq	.+68     	; 0x2c0 <M_DIO_Void_SetPinValue+0xfc>
 27c:	08 95       	ret
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
 27e:	3b b3       	in	r19, 0x1b	; 27
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <M_DIO_Void_SetPinValue+0xc6>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	2a 95       	dec	r18
 28c:	e2 f7       	brpl	.-8      	; 0x286 <M_DIO_Void_SetPinValue+0xc2>
 28e:	83 2b       	or	r24, r19
 290:	8b bb       	out	0x1b, r24	; 27
 292:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
 294:	38 b3       	in	r19, 0x18	; 24
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <M_DIO_Void_SetPinValue+0xdc>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	2a 95       	dec	r18
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <M_DIO_Void_SetPinValue+0xd8>
 2a4:	83 2b       	or	r24, r19
 2a6:	88 bb       	out	0x18, r24	; 24
 2a8:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
 2aa:	35 b3       	in	r19, 0x15	; 21
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <M_DIO_Void_SetPinValue+0xf2>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	2a 95       	dec	r18
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <M_DIO_Void_SetPinValue+0xee>
 2ba:	83 2b       	or	r24, r19
 2bc:	85 bb       	out	0x15, r24	; 21
 2be:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
 2c0:	32 b3       	in	r19, 0x12	; 18
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <M_DIO_Void_SetPinValue+0x108>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	2a 95       	dec	r18
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <M_DIO_Void_SetPinValue+0x104>
 2d0:	83 2b       	or	r24, r19
 2d2:	82 bb       	out	0x12, r24	; 18
 2d4:	08 95       	ret

000002d6 <M_Void_SPI_MasterInit>:
 	#endif   
	 /*Double Speed*/
 	#if SPI_DOUBLE_SPEED == ENABLED 
 		SET_BIT(SPSR_REG,SPI2X_BIT); 
 	#elif SPI_DOUBLE_SPEED == DISABLED
 		CLR_BIT(SPSR_REG,SPI2X_BIT); 
 2d6:	8e b1       	in	r24, 0x0e	; 14
 2d8:	8e 7f       	andi	r24, 0xFE	; 254
 2da:	8e b9       	out	0x0e, r24	; 14
 	#endif 
	 SPCR_REG = SPCR_RegValue;
 2dc:	81 e5       	ldi	r24, 0x51	; 81
 2de:	8d b9       	out	0x0d, r24	; 13
 2e0:	08 95       	ret

000002e2 <M_U8_SPI_TransmitRecieve>:
} 
u8 M_U8_SPI_TransmitRecieve(u8 Data){
	/*Put Data in the SPDR Register*/
	SPDR_REG = Data; 
 2e2:	8f b9       	out	0x0f, r24	; 15
	/*Wait for Transmit to complete*/
	while (!GET_BIT(SPSR_REG, SPIF_BIT)); 
 2e4:	77 9b       	sbis	0x0e, 7	; 14
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <M_U8_SPI_TransmitRecieve+0x2>
	return SPDR_REG;	
 2e8:	8f b1       	in	r24, 0x0f	; 15
}
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
