
R503_ATmegaDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800060  00800060  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e17  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a7  00000000  00000000  0000117b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cf  00000000  00000000  00001922  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00001ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e6  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023a  00000000  00000000  0000258a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 36       	cpi	r26, 0x6F	; 111
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  74:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <StoreAckBytes>:
		/**/
    }
} 
void StoreAckBytes (u8 RecivedByte){
	static u8 i = 0; 
	AckPack [i] = RecivedByte; 
  7c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  80:	e9 2f       	mov	r30, r25
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	ef 59       	subi	r30, 0x9F	; 159
  86:	ff 4f       	sbci	r31, 0xFF	; 255
  88:	80 83       	st	Z, r24
	if (i==11){
  8a:	9b 30       	cpi	r25, 0x0B	; 11
  8c:	19 f4       	brne	.+6      	; 0x94 <StoreAckBytes+0x18>
		i = 0; 
  8e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  92:	08 95       	ret
	} 
	else i++; 
  94:	9f 5f       	subi	r25, 0xFF	; 255
  96:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
  9a:	08 95       	ret

0000009c <main>:
#include "FingerPrint_Interface.h"
#include "util\delay.h" 
void StoreAckBytes (u8);
int main(void)
{  
	UART_Init(); 
  9c:	0e 94 98 00 	call	0x130	; 0x130 <UART_Init>
	UART_receiveByteAsynchCallBack(StoreAckBytes);   
  a0:	8e e3       	ldi	r24, 0x3E	; 62
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 ae 00 	call	0x15c	; 0x15c <UART_receiveByteAsynchCallBack>
	sei ();
  a8:	78 94       	sei
	FingerPS_AuraLedConfig(); 
  aa:	0e 94 7d 00 	call	0xfa	; 0xfa <FingerPS_AuraLedConfig>
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x12>

000000b0 <FingerP_send>:
/* A FUNCTION TO SEND A HANDSHAKE */
void FingerPS_handShake(void){
	FingerP_send(PCK_ID_COMMAND_PACK,LENGTH_3BYTE);
	UART_sendByte(HAND_SHAKE);
	UART_sendByte((PCK_ID_COMMAND_PACK+LENGTH_3BYTE+HAND_SHAKE)>>ONE_BYTE_SHIFT);
	UART_sendByte((PCK_ID_COMMAND_PACK+LENGTH_3BYTE+HAND_SHAKE)>>NO_BYTE_SHIFT);
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	18 2f       	mov	r17, r24
  b8:	c6 2f       	mov	r28, r22
  ba:	d7 2f       	mov	r29, r23
  bc:	8f ee       	ldi	r24, 0xEF	; 239
  be:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
  e0:	81 2f       	mov	r24, r17
  e2:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
  e6:	8d 2f       	mov	r24, r29
  e8:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
  ec:	8c 2f       	mov	r24, r28
  ee:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	08 95       	ret

000000fa <FingerPS_AuraLedConfig>:
} 
void FingerPS_AuraLedConfig (void){
	FingerP_send(PCK_ID_COMMAND_PACK,LENGTH_7BYTE);
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 58 00 	call	0xb0	; 0xb0 <FingerP_send>
	UART_sendByte(AURA_LED_CONFIG);
 104:	85 e3       	ldi	r24, 0x35	; 53
 106:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
	UART_sendByte(FLASHING_LIGHT);
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
	UART_sendByte(MEDIUM_SPEED);
 110:	8f e0       	ldi	r24, 0x0F	; 15
 112:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
	UART_sendByte(COLOR_INDEX_RED);
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
	UART_sendByte(LIGHT_COUNT);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
	UART_sendByte((PCK_ID_COMMAND_PACK+LENGTH_7BYTE+AURA_LED_CONFIG+FLASHING_LIGHT+MEDIUM_SPEED+COLOR_INDEX_RED+LIGHT_COUNT)>>ONE_BYTE_SHIFT);
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
	UART_sendByte((PCK_ID_COMMAND_PACK+LENGTH_7BYTE+AURA_LED_CONFIG+FLASHING_LIGHT+MEDIUM_SPEED+COLOR_INDEX_RED+LIGHT_COUNT)>>NO_BYTE_SHIFT);
 128:	82 e5       	ldi	r24, 0x52	; 82
 12a:	0e 94 a8 00 	call	0x150	; 0x150 <UART_sendByte>
 12e:	08 95       	ret

00000130 <UART_Init>:
/*THIS FUNCTION IS TO READ BYTE USING POLLING*/ 
	while (!GET_BIT(UCSRA,RXC)){
		/*WAIT UNTIL THE RECIEVER FLAG IS ONE*/
	}
	return (UDR);
}
 130:	80 b5       	in	r24, 0x20	; 32
 132:	8f 77       	andi	r24, 0x7F	; 127
 134:	80 bd       	out	0x20, r24	; 32
 136:	10 bc       	out	0x20, r1	; 32
 138:	80 e1       	ldi	r24, 0x10	; 16
 13a:	89 b9       	out	0x09, r24	; 9
 13c:	80 b5       	in	r24, 0x20	; 32
 13e:	80 bd       	out	0x20, r24	; 32
 140:	88 e9       	ldi	r24, 0x98	; 152
 142:	8a b9       	out	0x0a, r24	; 10
 144:	80 b5       	in	r24, 0x20	; 32
 146:	80 68       	ori	r24, 0x80	; 128
 148:	80 bd       	out	0x20, r24	; 32
 14a:	86 e8       	ldi	r24, 0x86	; 134
 14c:	80 bd       	out	0x20, r24	; 32
 14e:	08 95       	ret

00000150 <UART_sendByte>:
 150:	5d 9b       	sbis	0x0b, 5	; 11
 152:	fe cf       	rjmp	.-4      	; 0x150 <UART_sendByte>
 154:	8c b9       	out	0x0c, r24	; 12
 156:	5e 9b       	sbis	0x0b, 6	; 11
 158:	fe cf       	rjmp	.-4      	; 0x156 <UART_sendByte+0x6>
 15a:	08 95       	ret

0000015c <UART_receiveByteAsynchCallBack>:
void UART_receiveByteAsynchCallBack(void(*CpyPtr)(u8)){
	ptr_func = CpyPtr; 
 15c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <ptr_func+0x1>
 160:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <ptr_func>
 164:	08 95       	ret

00000166 <__vector_13>:
} 
ISR(USART_RXC_vect){
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	2f 93       	push	r18
 172:	3f 93       	push	r19
 174:	4f 93       	push	r20
 176:	5f 93       	push	r21
 178:	6f 93       	push	r22
 17a:	7f 93       	push	r23
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	af 93       	push	r26
 182:	bf 93       	push	r27
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
	ptr_func(UDR);
 188:	8c b1       	in	r24, 0x0c	; 12
 18a:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <ptr_func>
 18e:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <ptr_func+0x1>
 192:	09 95       	icall
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
