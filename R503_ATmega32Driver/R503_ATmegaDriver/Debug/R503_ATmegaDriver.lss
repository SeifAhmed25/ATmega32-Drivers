
R503_ATmegaDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000a12  00000aa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000a6  008000a6  00000aec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002287  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afb  00000000  00000000  00002f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001049  00000000  00000000  00003a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00004aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000874  00000000  00000000  00004e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e64  00000000  00000000  00005698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000064fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3b       	cpi	r26, 0xB5	; 181
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "FingerPrint_Interface.h"
#include "util\delay.h" 

int main(void)
{  
	H_Lcd_Void_LCDInit();
  92:	0e 94 52 01 	call	0x2a4	; 0x2a4 <H_Lcd_Void_LCDInit>
	UART_Init(); 
  96:	0e 94 c4 04 	call	0x988	; 0x988 <UART_Init>
	UART_receiveByteAsynchCallBack(StoreAckBytes);   
  9a:	80 ef       	ldi	r24, 0xF0	; 240
  9c:	92 e0       	ldi	r25, 0x02	; 2
  9e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <UART_receiveByteAsynchCallBack>
	sei ();
  a2:	78 94       	sei
	/*******************************************		Starting with an AURA Wink (;				********************/
	FingerPS_AuraLedConfig(); 
  a4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <FingerPS_AuraLedConfig>
	H_Lcd_Void_LCDGoTo(0,0);
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 94 01 	call	0x328	; 0x328 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"PUT  FINGER TO SCAN");
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <H_Lcd_Void_LCDWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	8f e4       	ldi	r24, 0x4F	; 79
  bc:	93 ec       	ldi	r25, 0xC3	; 195
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x2c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x36>
  c8:	00 00       	nop
	_delay_ms(4000); /*Delay to get the finger scan*/ 
	/******************************************		Here we are Setting a New Finger Print		********************/ 
	FingerPS_SetNewFingerPrint (0x0004); 
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 0a 03 	call	0x614	; 0x614 <FingerPS_SetNewFingerPrint>
	H_Lcd_Void_LCDClear(); 
  d2:	0e 94 90 01 	call	0x320	; 0x320 <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString((u8*)"NEW FINGER SAVED");
  d6:	84 e7       	ldi	r24, 0x74	; 116
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 7d 01 	call	0x2fa	; 0x2fa <H_Lcd_Void_LCDWriteString>
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	8b e7       	ldi	r24, 0x7B	; 123
  e2:	92 e9       	ldi	r25, 0x92	; 146
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x52>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x5c>
  ee:	00 00       	nop
	_delay_ms(3000); 
	/******************************************		Check a One to One Match					********************/ 
	H_Lcd_Void_LCDClear(); 
  f0:	0e 94 90 01 	call	0x320	; 0x320 <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString((u8*)"PUT FING TO CH MATCH");
  f4:	85 e8       	ldi	r24, 0x85	; 133
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <H_Lcd_Void_LCDWriteString>
	if (FingerPS_CheckOneToOneMatch(0x0004) == MATCHED){ 
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <FingerPS_CheckOneToOneMatch>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	39 f4       	brne	.+14     	; 0x116 <main+0x84>
			H_Lcd_Void_LCDClear();
 108:	0e 94 90 01 	call	0x320	; 0x320 <H_Lcd_Void_LCDClear>
			H_Lcd_Void_LCDWriteString((u8*)"MATCHED"); 
 10c:	8e e9       	ldi	r24, 0x9E	; 158
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 7d 01 	call	0x2fa	; 0x2fa <H_Lcd_Void_LCDWriteString>
 114:	06 c0       	rjmp	.+12     	; 0x122 <main+0x90>
		}
	else {
			H_Lcd_Void_LCDClear();
 116:	0e 94 90 01 	call	0x320	; 0x320 <H_Lcd_Void_LCDClear>
			H_Lcd_Void_LCDWriteString((u8*)"NOT MATCHED");		
 11a:	8a e9       	ldi	r24, 0x9A	; 154
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <H_Lcd_Void_LCDWriteString>
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x90>

00000124 <H_Lcd_Void_LCDWriteCharacter>:

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	8d e0       	ldi	r24, 0x0D	; 13
 12c:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 130:	c4 fb       	bst	r28, 4
 132:	66 27       	eor	r22, r22
 134:	60 f9       	bld	r22, 0
 136:	84 e1       	ldi	r24, 0x14	; 20
 138:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 13c:	c5 fb       	bst	r28, 5
 13e:	66 27       	eor	r22, r22
 140:	60 f9       	bld	r22, 0
 142:	85 e1       	ldi	r24, 0x15	; 21
 144:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 148:	c6 fb       	bst	r28, 6
 14a:	66 27       	eor	r22, r22
 14c:	60 f9       	bld	r22, 0
 14e:	86 e1       	ldi	r24, 0x16	; 22
 150:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 154:	6c 2f       	mov	r22, r28
 156:	66 1f       	adc	r22, r22
 158:	66 27       	eor	r22, r22
 15a:	66 1f       	adc	r22, r22
 15c:	88 e1       	ldi	r24, 0x18	; 24
 15e:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	8c e0       	ldi	r24, 0x0C	; 12
 166:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 16a:	8f e9       	ldi	r24, 0x9F	; 159
 16c:	9f e0       	ldi	r25, 0x0F	; 15
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <H_Lcd_Void_LCDWriteCharacter+0x4a>
 172:	00 c0       	rjmp	.+0      	; 0x174 <H_Lcd_Void_LCDWriteCharacter+0x50>
 174:	00 00       	nop
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 17e:	8f e9       	ldi	r24, 0x9F	; 159
 180:	9f e0       	ldi	r25, 0x0F	; 15
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <H_Lcd_Void_LCDWriteCharacter+0x5e>
 186:	00 c0       	rjmp	.+0      	; 0x188 <H_Lcd_Void_LCDWriteCharacter+0x64>
 188:	00 00       	nop
 18a:	6c 2f       	mov	r22, r28
 18c:	61 70       	andi	r22, 0x01	; 1
 18e:	84 e1       	ldi	r24, 0x14	; 20
 190:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 194:	c1 fb       	bst	r28, 1
 196:	66 27       	eor	r22, r22
 198:	60 f9       	bld	r22, 0
 19a:	85 e1       	ldi	r24, 0x15	; 21
 19c:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 1a0:	c2 fb       	bst	r28, 2
 1a2:	66 27       	eor	r22, r22
 1a4:	60 f9       	bld	r22, 0
 1a6:	86 e1       	ldi	r24, 0x16	; 22
 1a8:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 1ac:	c3 fb       	bst	r28, 3
 1ae:	66 27       	eor	r22, r22
 1b0:	60 f9       	bld	r22, 0
 1b2:	88 e1       	ldi	r24, 0x18	; 24
 1b4:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 1c0:	8f e9       	ldi	r24, 0x9F	; 159
 1c2:	9f e0       	ldi	r25, 0x0F	; 15
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <H_Lcd_Void_LCDWriteCharacter+0xa0>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <H_Lcd_Void_LCDWriteCharacter+0xa6>
 1ca:	00 00       	nop
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	8c e0       	ldi	r24, 0x0C	; 12
 1d0:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 1d4:	8f e1       	ldi	r24, 0x1F	; 31
 1d6:	9e e4       	ldi	r25, 0x4E	; 78
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <H_Lcd_Void_LCDWriteCharacter+0xb4>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <H_Lcd_Void_LCDWriteCharacter+0xba>
 1de:	00 00       	nop
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <H_Lcd_Void_LCDWriteCommand>:
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	8d e0       	ldi	r24, 0x0D	; 13
 1ec:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 1f0:	c4 fb       	bst	r28, 4
 1f2:	66 27       	eor	r22, r22
 1f4:	60 f9       	bld	r22, 0
 1f6:	84 e1       	ldi	r24, 0x14	; 20
 1f8:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 1fc:	c5 fb       	bst	r28, 5
 1fe:	66 27       	eor	r22, r22
 200:	60 f9       	bld	r22, 0
 202:	85 e1       	ldi	r24, 0x15	; 21
 204:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 208:	c6 fb       	bst	r28, 6
 20a:	66 27       	eor	r22, r22
 20c:	60 f9       	bld	r22, 0
 20e:	86 e1       	ldi	r24, 0x16	; 22
 210:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 214:	6c 2f       	mov	r22, r28
 216:	66 1f       	adc	r22, r22
 218:	66 27       	eor	r22, r22
 21a:	66 1f       	adc	r22, r22
 21c:	88 e1       	ldi	r24, 0x18	; 24
 21e:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 22a:	8f e9       	ldi	r24, 0x9F	; 159
 22c:	9f e0       	ldi	r25, 0x0F	; 15
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <H_Lcd_Void_LCDWriteCommand+0x4a>
 232:	00 c0       	rjmp	.+0      	; 0x234 <H_Lcd_Void_LCDWriteCommand+0x50>
 234:	00 00       	nop
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	8c e0       	ldi	r24, 0x0C	; 12
 23a:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 23e:	8f e9       	ldi	r24, 0x9F	; 159
 240:	9f e0       	ldi	r25, 0x0F	; 15
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <H_Lcd_Void_LCDWriteCommand+0x5e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <H_Lcd_Void_LCDWriteCommand+0x64>
 248:	00 00       	nop
 24a:	6c 2f       	mov	r22, r28
 24c:	61 70       	andi	r22, 0x01	; 1
 24e:	84 e1       	ldi	r24, 0x14	; 20
 250:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 254:	c1 fb       	bst	r28, 1
 256:	66 27       	eor	r22, r22
 258:	60 f9       	bld	r22, 0
 25a:	85 e1       	ldi	r24, 0x15	; 21
 25c:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 260:	c2 fb       	bst	r28, 2
 262:	66 27       	eor	r22, r22
 264:	60 f9       	bld	r22, 0
 266:	86 e1       	ldi	r24, 0x16	; 22
 268:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 26c:	c3 fb       	bst	r28, 3
 26e:	66 27       	eor	r22, r22
 270:	60 f9       	bld	r22, 0
 272:	88 e1       	ldi	r24, 0x18	; 24
 274:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	8c e0       	ldi	r24, 0x0C	; 12
 27c:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 280:	8f e9       	ldi	r24, 0x9F	; 159
 282:	9f e0       	ldi	r25, 0x0F	; 15
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <H_Lcd_Void_LCDWriteCommand+0xa0>
 288:	00 c0       	rjmp	.+0      	; 0x28a <H_Lcd_Void_LCDWriteCommand+0xa6>
 28a:	00 00       	nop
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	8c e0       	ldi	r24, 0x0C	; 12
 290:	0e 94 3b 04 	call	0x876	; 0x876 <M_DIO_Void_SetPinValue>
 294:	8f e1       	ldi	r24, 0x1F	; 31
 296:	9e e4       	ldi	r25, 0x4E	; 78
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <H_Lcd_Void_LCDWriteCommand+0xb4>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <H_Lcd_Void_LCDWriteCommand+0xba>
 29e:	00 00       	nop
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <H_Lcd_Void_LCDInit>:
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	84 e1       	ldi	r24, 0x14	; 20
 2a8:	0e 94 b2 03 	call	0x764	; 0x764 <M_DIO_Void_SetPinDirection>
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	85 e1       	ldi	r24, 0x15	; 21
 2b0:	0e 94 b2 03 	call	0x764	; 0x764 <M_DIO_Void_SetPinDirection>
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	86 e1       	ldi	r24, 0x16	; 22
 2b8:	0e 94 b2 03 	call	0x764	; 0x764 <M_DIO_Void_SetPinDirection>
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	88 e1       	ldi	r24, 0x18	; 24
 2c0:	0e 94 b2 03 	call	0x764	; 0x764 <M_DIO_Void_SetPinDirection>
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	8d e0       	ldi	r24, 0x0D	; 13
 2c8:	0e 94 b2 03 	call	0x764	; 0x764 <M_DIO_Void_SetPinDirection>
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	8c e0       	ldi	r24, 0x0C	; 12
 2d0:	0e 94 b2 03 	call	0x764	; 0x764 <M_DIO_Void_SetPinDirection>
 2d4:	83 e3       	ldi	r24, 0x33	; 51
 2d6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <H_Lcd_Void_LCDWriteCommand>
 2da:	82 e3       	ldi	r24, 0x32	; 50
 2dc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <H_Lcd_Void_LCDWriteCommand>
 2e0:	88 e2       	ldi	r24, 0x28	; 40
 2e2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <H_Lcd_Void_LCDWriteCommand>
 2e6:	8c e0       	ldi	r24, 0x0C	; 12
 2e8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <H_Lcd_Void_LCDWriteCommand>
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <H_Lcd_Void_LCDWriteCommand>
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <H_Lcd_Void_LCDWriteCommand>
 2f8:	08 95       	ret

000002fa <H_Lcd_Void_LCDWriteString>:
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	8c 01       	movw	r16, r24
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	03 c0       	rjmp	.+6      	; 0x30c <H_Lcd_Void_LCDWriteString+0x12>
 306:	0e 94 92 00 	call	0x124	; 0x124 <H_Lcd_Void_LCDWriteCharacter>
 30a:	cf 5f       	subi	r28, 0xFF	; 255
 30c:	f8 01       	movw	r30, r16
 30e:	ec 0f       	add	r30, r28
 310:	f1 1d       	adc	r31, r1
 312:	80 81       	ld	r24, Z
 314:	81 11       	cpse	r24, r1
 316:	f7 cf       	rjmp	.-18     	; 0x306 <H_Lcd_Void_LCDWriteString+0xc>
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <H_Lcd_Void_LCDClear>:
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <H_Lcd_Void_LCDWriteCommand>
 326:	08 95       	ret

00000328 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	00 d0       	rcall	.+0      	; 0x32e <H_Lcd_Void_LCDGoTo+0x6>
 32e:	00 d0       	rcall	.+0      	; 0x330 <H_Lcd_Void_LCDGoTo+0x8>
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
 334:	90 e8       	ldi	r25, 0x80	; 128
 336:	99 83       	std	Y+1, r25	; 0x01
 338:	90 ec       	ldi	r25, 0xC0	; 192
 33a:	9a 83       	std	Y+2, r25	; 0x02
 33c:	94 e9       	ldi	r25, 0x94	; 148
 33e:	9b 83       	std	Y+3, r25	; 0x03
 340:	94 ed       	ldi	r25, 0xD4	; 212
 342:	9c 83       	std	Y+4, r25	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
 344:	e1 e0       	ldi	r30, 0x01	; 1
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ec 0f       	add	r30, r28
 34a:	fd 1f       	adc	r31, r29
 34c:	e8 0f       	add	r30, r24
 34e:	f1 1d       	adc	r31, r1
 350:	80 81       	ld	r24, Z
 352:	86 0f       	add	r24, r22
 354:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <H_Lcd_Void_LCDWriteCommand>
}
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <FingerP_send>:
	
	UART_sendByte(NUM_OF_PAGES_TO_SEARCH>>ONE_BYTE_SHIFT);
	UART_sendByte(NUM_OF_PAGES_TO_SEARCH>>NO_BYTE_SHIFT);
	
	UART_sendByte((PCK_ID_COMMAND_PACK+LENGTH_8BYTE+SEARCH_FINGER+CHAR_BUFFER_1+FIRST_PAGE_ID+NUM_OF_PAGES_TO_SEARCH)>>ONE_BYTE_SHIFT);
	UART_sendByte((PCK_ID_COMMAND_PACK+LENGTH_8BYTE+SEARCH_FINGER+CHAR_BUFFER_1+FIRST_PAGE_ID+NUM_OF_PAGES_TO_SEARCH)>>NO_BYTE_SHIFT);
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	18 2f       	mov	r17, r24
 36e:	c6 2f       	mov	r28, r22
 370:	d7 2f       	mov	r29, r23
 372:	8f ee       	ldi	r24, 0xEF	; 239
 374:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 396:	81 2f       	mov	r24, r17
 398:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 39c:	8d 2f       	mov	r24, r29
 39e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	08 95       	ret

000003b0 <FingerPS_AuraLedConfig>:
 3b0:	67 e0       	ldi	r22, 0x07	; 7
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 b3 01 	call	0x366	; 0x366 <FingerP_send>
 3ba:	85 e3       	ldi	r24, 0x35	; 53
 3bc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 3c6:	8f e0       	ldi	r24, 0x0F	; 15
 3c8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 3de:	82 e5       	ldi	r24, 0x52	; 82
 3e0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 3e4:	08 95       	ret

000003e6 <FingerPS_genImg>:
 3e6:	63 e0       	ldi	r22, 0x03	; 3
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 b3 01 	call	0x366	; 0x366 <FingerP_send>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 402:	08 95       	ret

00000404 <FingerPS_convertImg1CharFile>:
 404:	8f ee       	ldi	r24, 0xEF	; 239
 406:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 434:	84 e0       	ldi	r24, 0x04	; 4
 436:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 44c:	88 e0       	ldi	r24, 0x08	; 8
 44e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 452:	08 95       	ret

00000454 <FingerPS_convertImg2CharFile>:
 454:	8f ee       	ldi	r24, 0xEF	; 239
 456:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 472:	8f ef       	ldi	r24, 0xFF	; 255
 474:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 484:	84 e0       	ldi	r24, 0x04	; 4
 486:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 49c:	89 e0       	ldi	r24, 0x09	; 9
 49e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4a2:	08 95       	ret

000004a4 <FingerPS_genTemplate>:
 4a4:	8f ee       	ldi	r24, 0xEF	; 239
 4a6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4e6:	89 e0       	ldi	r24, 0x09	; 9
 4e8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 4ec:	08 95       	ret

000004ee <FingerPS_strTemplate>:
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	ec 01       	movw	r28, r24
 4f4:	66 e0       	ldi	r22, 0x06	; 6
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 b3 01 	call	0x366	; 0x366 <FingerP_send>
 4fe:	86 e0       	ldi	r24, 0x06	; 6
 500:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 50a:	8d 2f       	mov	r24, r29
 50c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 510:	8c 2f       	mov	r24, r28
 512:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 516:	ce 01       	movw	r24, r28
 518:	0e 96       	adiw	r24, 0x0e	; 14
 51a:	89 2f       	mov	r24, r25
 51c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 520:	8c 2f       	mov	r24, r28
 522:	82 5f       	subi	r24, 0xF2	; 242
 524:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <FingerPS_LoadCharFile>:
}  
void FingerPS_LoadCharFile(u16 address){
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	c8 2f       	mov	r28, r24
 534:	d9 2f       	mov	r29, r25
	UART_sendByte(0xef);
 536:	8f ee       	ldi	r24, 0xEF	; 239
 538:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x01);
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0xff);
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0xff);
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0xff);
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0xff);
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x01);
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x00);
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x06);
 566:	86 e0       	ldi	r24, 0x06	; 6
 568:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x07);
 56c:	87 e0       	ldi	r24, 0x07	; 7
 56e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x02); /*load in the char file 2*/
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(address>>ONE_BYTE_SHIFT);
 578:	8d 2f       	mov	r24, r29
 57a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(address>>NO_BYTE_SHIFT);
 57e:	8c 2f       	mov	r24, r28
 580:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x00); 
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x14);
 58a:	84 e1       	ldi	r24, 0x14	; 20
 58c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
} 
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <FingerPS_match>:
void FingerPS_match(){
	UART_sendByte(0xef);
 596:	8f ee       	ldi	r24, 0xEF	; 239
 598:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x01);
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0xff);
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0xff);
 5a8:	8f ef       	ldi	r24, 0xFF	; 255
 5aa:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0xff);
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0xff);
 5b4:	8f ef       	ldi	r24, 0xFF	; 255
 5b6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x01);
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x00);
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x03);
 5c6:	83 e0       	ldi	r24, 0x03	; 3
 5c8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x03);
 5cc:	83 e0       	ldi	r24, 0x03	; 3
 5ce:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x00);
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
	UART_sendByte(0x07);
 5d8:	87 e0       	ldi	r24, 0x07	; 7
 5da:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_sendByte>
 5de:	08 95       	ret

000005e0 <StoreAckBytes>:
}
/********************************************** ISR	***************************************/
void StoreAckBytes (u8 RecivedByte){
	static u8 i = 0;
	AckPack [i] = RecivedByte; 
 5e0:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__data_end>
 5e4:	e9 2f       	mov	r30, r25
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	e9 55       	subi	r30, 0x59	; 89
 5ea:	ff 4f       	sbci	r31, 0xFF	; 255
 5ec:	80 83       	st	Z, r24
	if (i==11){
 5ee:	9b 30       	cpi	r25, 0x0B	; 11
 5f0:	19 f4       	brne	.+6      	; 0x5f8 <StoreAckBytes+0x18>
		i = 0;
 5f2:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
 5f6:	08 95       	ret
	}
	else i++;
 5f8:	9f 5f       	subi	r25, 0xFF	; 255
 5fa:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__data_end>
 5fe:	08 95       	ret

00000600 <FingerPS_CheckAck>:
}
u8 FingerPS_CheckAck (){
	u8 CheckResult;
	if (AckPack[11] == 0x0A){
 600:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <AckPack+0xb>
 604:	8a 30       	cpi	r24, 0x0A	; 10
 606:	21 f4       	brne	.+8      	; 0x610 <FingerPS_CheckAck+0x10>
		CheckResult = true ;
		AckPack [11] = 0x00; 
 608:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <AckPack+0xb>
	else i++;
}
u8 FingerPS_CheckAck (){
	u8 CheckResult;
	if (AckPack[11] == 0x0A){
		CheckResult = true ;
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	08 95       	ret
		AckPack [11] = 0x00; 
	}
	else{
		CheckResult = false;
 610:	80 e0       	ldi	r24, 0x00	; 0
	}
	return CheckResult;
} 
 612:	08 95       	ret

00000614 <FingerPS_SetNewFingerPrint>:
void FingerPS_SetNewFingerPrint (u16 address){
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	ec 01       	movw	r28, r24
	/*********************************************		FIRST IMAGE GENERATION	******************************************/
	RepeatGenImag1:
	FingerPS_genImg();
 61a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <FingerPS_genImg>
 61e:	2f ef       	ldi	r18, 0xFF	; 255
 620:	81 ee       	ldi	r24, 0xE1	; 225
 622:	94 e0       	ldi	r25, 0x04	; 4
 624:	21 50       	subi	r18, 0x01	; 1
 626:	80 40       	sbci	r24, 0x00	; 0
 628:	90 40       	sbci	r25, 0x00	; 0
 62a:	e1 f7       	brne	.-8      	; 0x624 <FingerPS_SetNewFingerPrint+0x10>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <FingerPS_SetNewFingerPrint+0x1a>
 62e:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag1; /*WAIT FOR ACK*/
 630:	0e 94 00 03 	call	0x600	; 0x600 <FingerPS_CheckAck>
 634:	88 23       	and	r24, r24
 636:	89 f3       	breq	.-30     	; 0x61a <FingerPS_SetNewFingerPrint+0x6>
	/*********************************************	FIRST CHARACTER FILE GENERATION	**************************************/
	RepeatConvertFile1:
	FingerPS_convertImg1CharFile();
 638:	0e 94 02 02 	call	0x404	; 0x404 <FingerPS_convertImg1CharFile>
 63c:	2f ef       	ldi	r18, 0xFF	; 255
 63e:	81 ee       	ldi	r24, 0xE1	; 225
 640:	94 e0       	ldi	r25, 0x04	; 4
 642:	21 50       	subi	r18, 0x01	; 1
 644:	80 40       	sbci	r24, 0x00	; 0
 646:	90 40       	sbci	r25, 0x00	; 0
 648:	e1 f7       	brne	.-8      	; 0x642 <FingerPS_SetNewFingerPrint+0x2e>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <FingerPS_SetNewFingerPrint+0x38>
 64c:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatConvertFile1; /*WAIT FOR ACK*/
 64e:	0e 94 00 03 	call	0x600	; 0x600 <FingerPS_CheckAck>
 652:	88 23       	and	r24, r24
 654:	89 f3       	breq	.-30     	; 0x638 <FingerPS_SetNewFingerPrint+0x24>
	/*********************************************		SECOND IMAGE GENERATION		**************************************/
	RepeatGenImag2:
	FingerPS_genImg();
 656:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <FingerPS_genImg>
 65a:	2f ef       	ldi	r18, 0xFF	; 255
 65c:	81 ee       	ldi	r24, 0xE1	; 225
 65e:	94 e0       	ldi	r25, 0x04	; 4
 660:	21 50       	subi	r18, 0x01	; 1
 662:	80 40       	sbci	r24, 0x00	; 0
 664:	90 40       	sbci	r25, 0x00	; 0
 666:	e1 f7       	brne	.-8      	; 0x660 <FingerPS_SetNewFingerPrint+0x4c>
 668:	00 c0       	rjmp	.+0      	; 0x66a <FingerPS_SetNewFingerPrint+0x56>
 66a:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag2;/*WAIT FOR ACK*/
 66c:	0e 94 00 03 	call	0x600	; 0x600 <FingerPS_CheckAck>
 670:	88 23       	and	r24, r24
 672:	89 f3       	breq	.-30     	; 0x656 <FingerPS_SetNewFingerPrint+0x42>
	/*********************************************		SECONED CHAR FILE GENERATED		**********************************/
	RepeatConvertFile2:
	FingerPS_convertImg2CharFile();
 674:	0e 94 2a 02 	call	0x454	; 0x454 <FingerPS_convertImg2CharFile>
 678:	2f ef       	ldi	r18, 0xFF	; 255
 67a:	81 ee       	ldi	r24, 0xE1	; 225
 67c:	94 e0       	ldi	r25, 0x04	; 4
 67e:	21 50       	subi	r18, 0x01	; 1
 680:	80 40       	sbci	r24, 0x00	; 0
 682:	90 40       	sbci	r25, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <FingerPS_SetNewFingerPrint+0x6a>
 686:	00 c0       	rjmp	.+0      	; 0x688 <FingerPS_SetNewFingerPrint+0x74>
 688:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatConvertFile2;/*WAIT FOR ACK*/
 68a:	0e 94 00 03 	call	0x600	; 0x600 <FingerPS_CheckAck>
 68e:	88 23       	and	r24, r24
 690:	89 f3       	breq	.-30     	; 0x674 <FingerPS_SetNewFingerPrint+0x60>
	/********************************************		Generate Tempelate			**********************************/
	FingerPS_genTemplate();
 692:	0e 94 52 02 	call	0x4a4	; 0x4a4 <FingerPS_genTemplate>
 696:	2f ef       	ldi	r18, 0xFF	; 255
 698:	89 e6       	ldi	r24, 0x69	; 105
 69a:	98 e1       	ldi	r25, 0x18	; 24
 69c:	21 50       	subi	r18, 0x01	; 1
 69e:	80 40       	sbci	r24, 0x00	; 0
 6a0:	90 40       	sbci	r25, 0x00	; 0
 6a2:	e1 f7       	brne	.-8      	; 0x69c <FingerPS_SetNewFingerPrint+0x88>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <FingerPS_SetNewFingerPrint+0x92>
 6a6:	00 00       	nop
	_delay_ms(500);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag1;/*WAIT FOR ACK*/
 6a8:	0e 94 00 03 	call	0x600	; 0x600 <FingerPS_CheckAck>
 6ac:	88 23       	and	r24, r24
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <FingerPS_SetNewFingerPrint+0x9e>
 6b0:	b4 cf       	rjmp	.-152    	; 0x61a <FingerPS_SetNewFingerPrint+0x6>
	/*******************************************		Tempelate Storing			***********************************/
	RepeatStrTemp:
	FingerPS_strTemplate(address);
 6b2:	ce 01       	movw	r24, r28
 6b4:	0e 94 77 02 	call	0x4ee	; 0x4ee <FingerPS_strTemplate>
 6b8:	2f ef       	ldi	r18, 0xFF	; 255
 6ba:	81 ee       	ldi	r24, 0xE1	; 225
 6bc:	94 e0       	ldi	r25, 0x04	; 4
 6be:	21 50       	subi	r18, 0x01	; 1
 6c0:	80 40       	sbci	r24, 0x00	; 0
 6c2:	90 40       	sbci	r25, 0x00	; 0
 6c4:	e1 f7       	brne	.-8      	; 0x6be <FingerPS_SetNewFingerPrint+0xaa>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <FingerPS_SetNewFingerPrint+0xb4>
 6c8:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatStrTemp;/*WAIT FOR ACK*/
 6ca:	0e 94 00 03 	call	0x600	; 0x600 <FingerPS_CheckAck>
 6ce:	88 23       	and	r24, r24
 6d0:	81 f3       	breq	.-32     	; 0x6b2 <FingerPS_SetNewFingerPrint+0x9e>
}
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	08 95       	ret

000006d8 <FingerPS_CheckOneToOneMatch>:
u8 FingerPS_CheckOneToOneMatch(u16 address){
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	ec 01       	movw	r28, r24
	u8 match_result; 
	/*******************************************		Generate Image to check one to one match	********************/
	RepeatCheckImagGen:
	FingerPS_genImg();
 6de:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <FingerPS_genImg>
 6e2:	2f ef       	ldi	r18, 0xFF	; 255
 6e4:	81 ee       	ldi	r24, 0xE1	; 225
 6e6:	94 e0       	ldi	r25, 0x04	; 4
 6e8:	21 50       	subi	r18, 0x01	; 1
 6ea:	80 40       	sbci	r24, 0x00	; 0
 6ec:	90 40       	sbci	r25, 0x00	; 0
 6ee:	e1 f7       	brne	.-8      	; 0x6e8 <FingerPS_CheckOneToOneMatch+0x10>
 6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <FingerPS_CheckOneToOneMatch+0x1a>
 6f2:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatCheckImagGen; /*WAIT FOR ACK*/
 6f4:	0e 94 00 03 	call	0x600	; 0x600 <FingerPS_CheckAck>
 6f8:	88 23       	and	r24, r24
 6fa:	89 f3       	breq	.-30     	; 0x6de <FingerPS_CheckOneToOneMatch+0x6>
	/******************************************			Generate char from Check Image	****************************************/
	RepeatCharCheckFileGen:
	FingerPS_convertImg1CharFile();
 6fc:	0e 94 02 02 	call	0x404	; 0x404 <FingerPS_convertImg1CharFile>
 700:	2f ef       	ldi	r18, 0xFF	; 255
 702:	81 ee       	ldi	r24, 0xE1	; 225
 704:	94 e0       	ldi	r25, 0x04	; 4
 706:	21 50       	subi	r18, 0x01	; 1
 708:	80 40       	sbci	r24, 0x00	; 0
 70a:	90 40       	sbci	r25, 0x00	; 0
 70c:	e1 f7       	brne	.-8      	; 0x706 <FingerPS_CheckOneToOneMatch+0x2e>
 70e:	00 c0       	rjmp	.+0      	; 0x710 <FingerPS_CheckOneToOneMatch+0x38>
 710:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatCharCheckFileGen; /*WAIT FOR ACK*/
 712:	0e 94 00 03 	call	0x600	; 0x600 <FingerPS_CheckAck>
 716:	88 23       	and	r24, r24
 718:	89 f3       	breq	.-30     	; 0x6fc <FingerPS_CheckOneToOneMatch+0x24>
	/******************************************			Load Char in char file 2	***********************************/
	RepeatLoadCharFile:
	FingerPS_LoadCharFile(address);
 71a:	ce 01       	movw	r24, r28
 71c:	0e 94 97 02 	call	0x52e	; 0x52e <FingerPS_LoadCharFile>
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	81 ee       	ldi	r24, 0xE1	; 225
 724:	94 e0       	ldi	r25, 0x04	; 4
 726:	21 50       	subi	r18, 0x01	; 1
 728:	80 40       	sbci	r24, 0x00	; 0
 72a:	90 40       	sbci	r25, 0x00	; 0
 72c:	e1 f7       	brne	.-8      	; 0x726 <FingerPS_CheckOneToOneMatch+0x4e>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <FingerPS_CheckOneToOneMatch+0x58>
 730:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatLoadCharFile; /*Wait for ACK*/
 732:	0e 94 00 03 	call	0x600	; 0x600 <FingerPS_CheckAck>
 736:	88 23       	and	r24, r24
 738:	81 f3       	breq	.-32     	; 0x71a <FingerPS_CheckOneToOneMatch+0x42>
	/******************************************			CHECK MATCH				****************************************/
	FingerPS_match();
 73a:	0e 94 cb 02 	call	0x596	; 0x596 <FingerPS_match>
 73e:	2f ef       	ldi	r18, 0xFF	; 255
 740:	81 ee       	ldi	r24, 0xE1	; 225
 742:	94 e0       	ldi	r25, 0x04	; 4
 744:	21 50       	subi	r18, 0x01	; 1
 746:	80 40       	sbci	r24, 0x00	; 0
 748:	90 40       	sbci	r25, 0x00	; 0
 74a:	e1 f7       	brne	.-8      	; 0x744 <FingerPS_CheckOneToOneMatch+0x6c>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <FingerPS_CheckOneToOneMatch+0x76>
 74e:	00 00       	nop
	_delay_ms(100); 
	if (AckPack[9] == 0x00){
 750:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <AckPack+0x9>
 754:	81 11       	cpse	r24, r1
 756:	02 c0       	rjmp	.+4      	; 0x75c <FingerPS_CheckOneToOneMatch+0x84>
		match_result = MATCHED;
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	01 c0       	rjmp	.+2      	; 0x75e <FingerPS_CheckOneToOneMatch+0x86>
	}
	else {
		match_result = NOTMATCHED; 
 75c:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return match_result; 
}
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	08 95       	ret

00000764 <M_DIO_Void_SetPinDirection>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
 764:	9d ec       	ldi	r25, 0xCD	; 205
 766:	89 9f       	mul	r24, r25
 768:	91 2d       	mov	r25, r1
 76a:	11 24       	eor	r1, r1
 76c:	29 2f       	mov	r18, r25
 76e:	26 95       	lsr	r18
 770:	26 95       	lsr	r18
 772:	26 95       	lsr	r18
 774:	22 0f       	add	r18, r18
 776:	32 2f       	mov	r19, r18
 778:	33 0f       	add	r19, r19
 77a:	33 0f       	add	r19, r19
 77c:	23 0f       	add	r18, r19
 77e:	82 1b       	sub	r24, r18
 780:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
 782:	96 95       	lsr	r25
 784:	96 95       	lsr	r25
 786:	96 95       	lsr	r25
	switch(Copy_U8_State)
 788:	66 23       	and	r22, r22
 78a:	19 f0       	breq	.+6      	; 0x792 <M_DIO_Void_SetPinDirection+0x2e>
 78c:	61 30       	cpi	r22, 0x01	; 1
 78e:	e1 f1       	breq	.+120    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 790:	08 95       	ret
	{
	case INPUT:
		switch(Local_U8_Group)
 792:	92 30       	cpi	r25, 0x02	; 2
 794:	a9 f0       	breq	.+42     	; 0x7c0 <M_DIO_Void_SetPinDirection+0x5c>
 796:	18 f4       	brcc	.+6      	; 0x79e <M_DIO_Void_SetPinDirection+0x3a>
 798:	91 30       	cpi	r25, 0x01	; 1
 79a:	31 f0       	breq	.+12     	; 0x7a8 <M_DIO_Void_SetPinDirection+0x44>
 79c:	08 95       	ret
 79e:	93 30       	cpi	r25, 0x03	; 3
 7a0:	d9 f0       	breq	.+54     	; 0x7d8 <M_DIO_Void_SetPinDirection+0x74>
 7a2:	94 30       	cpi	r25, 0x04	; 4
 7a4:	29 f1       	breq	.+74     	; 0x7f0 <M_DIO_Void_SetPinDirection+0x8c>
 7a6:	08 95       	ret
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
 7a8:	3a b3       	in	r19, 0x1a	; 26
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <M_DIO_Void_SetPinDirection+0x50>
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	2a 95       	dec	r18
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <M_DIO_Void_SetPinDirection+0x4c>
 7b8:	80 95       	com	r24
 7ba:	83 23       	and	r24, r19
 7bc:	8a bb       	out	0x1a, r24	; 26
 7be:	08 95       	ret
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
 7c0:	37 b3       	in	r19, 0x17	; 23
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <M_DIO_Void_SetPinDirection+0x68>
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	2a 95       	dec	r18
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <M_DIO_Void_SetPinDirection+0x64>
 7d0:	80 95       	com	r24
 7d2:	83 23       	and	r24, r19
 7d4:	87 bb       	out	0x17, r24	; 23
 7d6:	08 95       	ret
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
 7d8:	34 b3       	in	r19, 0x14	; 20
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <M_DIO_Void_SetPinDirection+0x80>
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	2a 95       	dec	r18
 7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <M_DIO_Void_SetPinDirection+0x7c>
 7e8:	80 95       	com	r24
 7ea:	83 23       	and	r24, r19
 7ec:	84 bb       	out	0x14, r24	; 20
 7ee:	08 95       	ret
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
 7f0:	31 b3       	in	r19, 0x11	; 17
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <M_DIO_Void_SetPinDirection+0x98>
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	2a 95       	dec	r18
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <M_DIO_Void_SetPinDirection+0x94>
 800:	80 95       	com	r24
 802:	83 23       	and	r24, r19
 804:	81 bb       	out	0x11, r24	; 17
 806:	08 95       	ret
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
 808:	92 30       	cpi	r25, 0x02	; 2
 80a:	a1 f0       	breq	.+40     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 80c:	18 f4       	brcc	.+6      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 80e:	91 30       	cpi	r25, 0x01	; 1
 810:	31 f0       	breq	.+12     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 812:	08 95       	ret
 814:	93 30       	cpi	r25, 0x03	; 3
 816:	c9 f0       	breq	.+50     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 818:	94 30       	cpi	r25, 0x04	; 4
 81a:	11 f1       	breq	.+68     	; 0x860 <__stack+0x1>
 81c:	08 95       	ret
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
 81e:	3a b3       	in	r19, 0x1a	; 26
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	2a 95       	dec	r18
 82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	83 2b       	or	r24, r19
 830:	8a bb       	out	0x1a, r24	; 26
 832:	08 95       	ret
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
 834:	37 b3       	in	r19, 0x17	; 23
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83c:	88 0f       	add	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	2a 95       	dec	r18
 842:	e2 f7       	brpl	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 844:	83 2b       	or	r24, r19
 846:	87 bb       	out	0x17, r24	; 23
 848:	08 95       	ret
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
 84a:	34 b3       	in	r19, 0x14	; 20
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	2a 95       	dec	r18
 858:	e2 f7       	brpl	.-8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 85a:	83 2b       	or	r24, r19
 85c:	84 bb       	out	0x14, r24	; 20
 85e:	08 95       	ret
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
 860:	31 b3       	in	r19, 0x11	; 17
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	2a 95       	dec	r18
 86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
 870:	83 2b       	or	r24, r19
 872:	81 bb       	out	0x11, r24	; 17
 874:	08 95       	ret

00000876 <M_DIO_Void_SetPinValue>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
 876:	9d ec       	ldi	r25, 0xCD	; 205
 878:	89 9f       	mul	r24, r25
 87a:	91 2d       	mov	r25, r1
 87c:	11 24       	eor	r1, r1
 87e:	29 2f       	mov	r18, r25
 880:	26 95       	lsr	r18
 882:	26 95       	lsr	r18
 884:	26 95       	lsr	r18
 886:	22 0f       	add	r18, r18
 888:	32 2f       	mov	r19, r18
 88a:	33 0f       	add	r19, r19
 88c:	33 0f       	add	r19, r19
 88e:	23 0f       	add	r18, r19
 890:	82 1b       	sub	r24, r18
 892:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
 894:	96 95       	lsr	r25
 896:	96 95       	lsr	r25
 898:	96 95       	lsr	r25
	switch(Copy_U8_State)
 89a:	66 23       	and	r22, r22
 89c:	19 f0       	breq	.+6      	; 0x8a4 <M_DIO_Void_SetPinValue+0x2e>
 89e:	61 30       	cpi	r22, 0x01	; 1
 8a0:	e1 f1       	breq	.+120    	; 0x91a <M_DIO_Void_SetPinValue+0xa4>
 8a2:	08 95       	ret
	{
	case LOW:
		switch(Local_U8_Group)
 8a4:	92 30       	cpi	r25, 0x02	; 2
 8a6:	a9 f0       	breq	.+42     	; 0x8d2 <M_DIO_Void_SetPinValue+0x5c>
 8a8:	18 f4       	brcc	.+6      	; 0x8b0 <M_DIO_Void_SetPinValue+0x3a>
 8aa:	91 30       	cpi	r25, 0x01	; 1
 8ac:	31 f0       	breq	.+12     	; 0x8ba <M_DIO_Void_SetPinValue+0x44>
 8ae:	08 95       	ret
 8b0:	93 30       	cpi	r25, 0x03	; 3
 8b2:	d9 f0       	breq	.+54     	; 0x8ea <M_DIO_Void_SetPinValue+0x74>
 8b4:	94 30       	cpi	r25, 0x04	; 4
 8b6:	29 f1       	breq	.+74     	; 0x902 <M_DIO_Void_SetPinValue+0x8c>
 8b8:	08 95       	ret
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
 8ba:	3b b3       	in	r19, 0x1b	; 27
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <M_DIO_Void_SetPinValue+0x50>
 8c2:	88 0f       	add	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	2a 95       	dec	r18
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <M_DIO_Void_SetPinValue+0x4c>
 8ca:	80 95       	com	r24
 8cc:	83 23       	and	r24, r19
 8ce:	8b bb       	out	0x1b, r24	; 27
 8d0:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
 8d2:	38 b3       	in	r19, 0x18	; 24
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <M_DIO_Void_SetPinValue+0x68>
 8da:	88 0f       	add	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	2a 95       	dec	r18
 8e0:	e2 f7       	brpl	.-8      	; 0x8da <M_DIO_Void_SetPinValue+0x64>
 8e2:	80 95       	com	r24
 8e4:	83 23       	and	r24, r19
 8e6:	88 bb       	out	0x18, r24	; 24
 8e8:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
 8ea:	35 b3       	in	r19, 0x15	; 21
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <M_DIO_Void_SetPinValue+0x80>
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	2a 95       	dec	r18
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <M_DIO_Void_SetPinValue+0x7c>
 8fa:	80 95       	com	r24
 8fc:	83 23       	and	r24, r19
 8fe:	85 bb       	out	0x15, r24	; 21
 900:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
 902:	32 b3       	in	r19, 0x12	; 18
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	02 c0       	rjmp	.+4      	; 0x90e <M_DIO_Void_SetPinValue+0x98>
 90a:	88 0f       	add	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	2a 95       	dec	r18
 910:	e2 f7       	brpl	.-8      	; 0x90a <M_DIO_Void_SetPinValue+0x94>
 912:	80 95       	com	r24
 914:	83 23       	and	r24, r19
 916:	82 bb       	out	0x12, r24	; 18
 918:	08 95       	ret
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
 91a:	92 30       	cpi	r25, 0x02	; 2
 91c:	a1 f0       	breq	.+40     	; 0x946 <M_DIO_Void_SetPinValue+0xd0>
 91e:	18 f4       	brcc	.+6      	; 0x926 <M_DIO_Void_SetPinValue+0xb0>
 920:	91 30       	cpi	r25, 0x01	; 1
 922:	31 f0       	breq	.+12     	; 0x930 <M_DIO_Void_SetPinValue+0xba>
 924:	08 95       	ret
 926:	93 30       	cpi	r25, 0x03	; 3
 928:	c9 f0       	breq	.+50     	; 0x95c <M_DIO_Void_SetPinValue+0xe6>
 92a:	94 30       	cpi	r25, 0x04	; 4
 92c:	11 f1       	breq	.+68     	; 0x972 <M_DIO_Void_SetPinValue+0xfc>
 92e:	08 95       	ret
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
 930:	3b b3       	in	r19, 0x1b	; 27
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	02 c0       	rjmp	.+4      	; 0x93c <M_DIO_Void_SetPinValue+0xc6>
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	2a 95       	dec	r18
 93e:	e2 f7       	brpl	.-8      	; 0x938 <M_DIO_Void_SetPinValue+0xc2>
 940:	83 2b       	or	r24, r19
 942:	8b bb       	out	0x1b, r24	; 27
 944:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
 946:	38 b3       	in	r19, 0x18	; 24
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	02 c0       	rjmp	.+4      	; 0x952 <M_DIO_Void_SetPinValue+0xdc>
 94e:	88 0f       	add	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	2a 95       	dec	r18
 954:	e2 f7       	brpl	.-8      	; 0x94e <M_DIO_Void_SetPinValue+0xd8>
 956:	83 2b       	or	r24, r19
 958:	88 bb       	out	0x18, r24	; 24
 95a:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
 95c:	35 b3       	in	r19, 0x15	; 21
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	02 c0       	rjmp	.+4      	; 0x968 <M_DIO_Void_SetPinValue+0xf2>
 964:	88 0f       	add	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	2a 95       	dec	r18
 96a:	e2 f7       	brpl	.-8      	; 0x964 <M_DIO_Void_SetPinValue+0xee>
 96c:	83 2b       	or	r24, r19
 96e:	85 bb       	out	0x15, r24	; 21
 970:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
 972:	32 b3       	in	r19, 0x12	; 18
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	02 c0       	rjmp	.+4      	; 0x97e <M_DIO_Void_SetPinValue+0x108>
 97a:	88 0f       	add	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	2a 95       	dec	r18
 980:	e2 f7       	brpl	.-8      	; 0x97a <M_DIO_Void_SetPinValue+0x104>
 982:	83 2b       	or	r24, r19
 984:	82 bb       	out	0x12, r24	; 18
 986:	08 95       	ret

00000988 <UART_Init>:
/*THIS FUNCTION IS TO READ BYTE USING POLLING*/ 
	while (!GET_BIT(UCSRA,RXC)){
		/*WAIT UNTIL THE RECIEVER FLAG IS ONE*/
	}
	return (UDR);
}
 988:	80 b5       	in	r24, 0x20	; 32
 98a:	8f 77       	andi	r24, 0x7F	; 127
 98c:	80 bd       	out	0x20, r24	; 32
 98e:	10 bc       	out	0x20, r1	; 32
 990:	80 e1       	ldi	r24, 0x10	; 16
 992:	89 b9       	out	0x09, r24	; 9
 994:	80 b5       	in	r24, 0x20	; 32
 996:	80 bd       	out	0x20, r24	; 32
 998:	88 e9       	ldi	r24, 0x98	; 152
 99a:	8a b9       	out	0x0a, r24	; 10
 99c:	80 b5       	in	r24, 0x20	; 32
 99e:	80 68       	ori	r24, 0x80	; 128
 9a0:	80 bd       	out	0x20, r24	; 32
 9a2:	86 e8       	ldi	r24, 0x86	; 134
 9a4:	80 bd       	out	0x20, r24	; 32
 9a6:	08 95       	ret

000009a8 <UART_sendByte>:
 9a8:	5d 9b       	sbis	0x0b, 5	; 11
 9aa:	fe cf       	rjmp	.-4      	; 0x9a8 <UART_sendByte>
 9ac:	8c b9       	out	0x0c, r24	; 12
 9ae:	5e 9b       	sbis	0x0b, 6	; 11
 9b0:	fe cf       	rjmp	.-4      	; 0x9ae <UART_sendByte+0x6>
 9b2:	08 95       	ret

000009b4 <UART_receiveByteAsynchCallBack>:
void UART_receiveByteAsynchCallBack(void(*CpyPtr)(u8)){
	ptr_func = CpyPtr; 
 9b4:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <ptr_func+0x1>
 9b8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <ptr_func>
 9bc:	08 95       	ret

000009be <__vector_13>:
} 
ISR(USART_RXC_vect){
 9be:	1f 92       	push	r1
 9c0:	0f 92       	push	r0
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	0f 92       	push	r0
 9c6:	11 24       	eor	r1, r1
 9c8:	2f 93       	push	r18
 9ca:	3f 93       	push	r19
 9cc:	4f 93       	push	r20
 9ce:	5f 93       	push	r21
 9d0:	6f 93       	push	r22
 9d2:	7f 93       	push	r23
 9d4:	8f 93       	push	r24
 9d6:	9f 93       	push	r25
 9d8:	af 93       	push	r26
 9da:	bf 93       	push	r27
 9dc:	ef 93       	push	r30
 9de:	ff 93       	push	r31
	ptr_func(UDR);
 9e0:	8c b1       	in	r24, 0x0c	; 12
 9e2:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <ptr_func>
 9e6:	f0 91 b4 00 	lds	r31, 0x00B4	; 0x8000b4 <ptr_func+0x1>
 9ea:	09 95       	icall
}
 9ec:	ff 91       	pop	r31
 9ee:	ef 91       	pop	r30
 9f0:	bf 91       	pop	r27
 9f2:	af 91       	pop	r26
 9f4:	9f 91       	pop	r25
 9f6:	8f 91       	pop	r24
 9f8:	7f 91       	pop	r23
 9fa:	6f 91       	pop	r22
 9fc:	5f 91       	pop	r21
 9fe:	4f 91       	pop	r20
 a00:	3f 91       	pop	r19
 a02:	2f 91       	pop	r18
 a04:	0f 90       	pop	r0
 a06:	0f be       	out	0x3f, r0	; 63
 a08:	0f 90       	pop	r0
 a0a:	1f 90       	pop	r1
 a0c:	18 95       	reti

00000a0e <_exit>:
 a0e:	f8 94       	cli

00000a10 <__stop_program>:
 a10:	ff cf       	rjmp	.-2      	; 0xa10 <__stop_program>
