
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007db  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cd  00000000  00000000  000009f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000368  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040e  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f0  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000018ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 * Author : seif
 */ 
#include "I2C_Interface.h" 
int main(void)
{	/*TESTING DRIVER USING THE I2C DEBUGGER IN PROTUESS*/
	M_Void_I2C_Init(); 
  6c:	0e 94 43 00 	call	0x86	; 0x86 <M_Void_I2C_Init>
	M_U8_I2C_Start();								
  70:	0e 94 47 00 	call	0x8e	; 0x8e <M_U8_I2C_Start>
	M_U8_I2C_SendSlaveAddressWithWrite(0xA0); 
  74:	80 ea       	ldi	r24, 0xA0	; 160
  76:	0e 94 52 00 	call	0xa4	; 0xa4 <M_U8_I2C_SendSlaveAddressWithWrite>
	M_U8_I2C_Write(0x00);					
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	0e 94 5b 00 	call	0xb6	; 0xb6 <M_U8_I2C_Write>
	M_Void_I2C_STOP();						
  80:	0e 94 64 00 	call	0xc8	; 0xc8 <M_Void_I2C_STOP>
  84:	ff cf       	rjmp	.-2      	; 0x84 <main+0x18>

00000086 <M_Void_I2C_Init>:
}
u8 M_U8_I2C_ReadWithNack(){
	TWCR_REG =(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
    while(!(TWCR_REG&(1<<TWINT)));			/* Wait until TWI finish its current job */
    return TWDR_REG;					/* Return received data */
}
  86:	11 b8       	out	0x01, r1	; 1
  88:	80 e2       	ldi	r24, 0x20	; 32
  8a:	80 b9       	out	0x00, r24	; 0
  8c:	08 95       	ret

0000008e <M_U8_I2C_Start>:
  8e:	84 ea       	ldi	r24, 0xA4	; 164
  90:	86 bf       	out	0x36, r24	; 54
  92:	06 b6       	in	r0, 0x36	; 54
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <M_U8_I2C_Start+0x4>
  98:	81 b1       	in	r24, 0x01	; 1
  9a:	88 7f       	andi	r24, 0xF8	; 248
  9c:	88 30       	cpi	r24, 0x08	; 8
  9e:	09 f0       	breq	.+2      	; 0xa2 <M_U8_I2C_Start+0x14>
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	08 95       	ret

000000a4 <M_U8_I2C_SendSlaveAddressWithWrite>:
  a4:	83 b9       	out	0x03, r24	; 3
  a6:	84 e8       	ldi	r24, 0x84	; 132
  a8:	86 bf       	out	0x36, r24	; 54
  aa:	06 b6       	in	r0, 0x36	; 54
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <M_U8_I2C_SendSlaveAddressWithWrite+0x6>
  b0:	81 b1       	in	r24, 0x01	; 1
  b2:	88 7f       	andi	r24, 0xF8	; 248
  b4:	08 95       	ret

000000b6 <M_U8_I2C_Write>:
  b6:	83 b9       	out	0x03, r24	; 3
  b8:	84 e8       	ldi	r24, 0x84	; 132
  ba:	86 bf       	out	0x36, r24	; 54
  bc:	06 b6       	in	r0, 0x36	; 54
  be:	07 fe       	sbrs	r0, 7
  c0:	fd cf       	rjmp	.-6      	; 0xbc <M_U8_I2C_Write+0x6>
  c2:	81 b1       	in	r24, 0x01	; 1
  c4:	88 7f       	andi	r24, 0xF8	; 248
  c6:	08 95       	ret

000000c8 <M_Void_I2C_STOP>:
void M_Void_I2C_STOP(){
    TWCR_REG=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
  c8:	84 e9       	ldi	r24, 0x94	; 148
  ca:	86 bf       	out	0x36, r24	; 54
    while(TWCR_REG&(1<<TWSTO));				 /* Wait until stop condition execution */
  cc:	06 b6       	in	r0, 0x36	; 54
  ce:	04 fc       	sbrc	r0, 4
  d0:	fd cf       	rjmp	.-6      	; 0xcc <M_Void_I2C_STOP+0x4>
  d2:	08 95       	ret

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
