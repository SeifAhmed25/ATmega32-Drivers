
UART_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000049e  00000532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800074  00800074  00000546  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011fa  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089f  00000000  00000000  000018a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000894  00000000  00000000  00002145  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  000029dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000617  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000091a  00000000  00000000  00003237  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003b51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  8a:	0c 94 4d 02 	jmp	0x49a	; 0x49a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	8d e0       	ldi	r24, 0x0D	; 13
  9a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
  9e:	c4 fb       	bst	r28, 4
  a0:	66 27       	eor	r22, r22
  a2:	60 f9       	bld	r22, 0
  a4:	84 e1       	ldi	r24, 0x14	; 20
  a6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
  aa:	c5 fb       	bst	r28, 5
  ac:	66 27       	eor	r22, r22
  ae:	60 f9       	bld	r22, 0
  b0:	85 e1       	ldi	r24, 0x15	; 21
  b2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
  b6:	c6 fb       	bst	r28, 6
  b8:	66 27       	eor	r22, r22
  ba:	60 f9       	bld	r22, 0
  bc:	86 e1       	ldi	r24, 0x16	; 22
  be:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
  c2:	6c 2f       	mov	r22, r28
  c4:	66 1f       	adc	r22, r22
  c6:	66 27       	eor	r22, r22
  c8:	66 1f       	adc	r22, r22
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <H_Lcd_Void_LCDWriteCommand+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <H_Lcd_Void_LCDWriteCommand+0x50>
  e2:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	8c e0       	ldi	r24, 0x0C	; 12
  e8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <H_Lcd_Void_LCDWriteCommand+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <H_Lcd_Void_LCDWriteCommand+0x64>
  f6:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
  f8:	6c 2f       	mov	r22, r28
  fa:	61 70       	andi	r22, 0x01	; 1
  fc:	84 e1       	ldi	r24, 0x14	; 20
  fe:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
 102:	c1 fb       	bst	r28, 1
 104:	66 27       	eor	r22, r22
 106:	60 f9       	bld	r22, 0
 108:	85 e1       	ldi	r24, 0x15	; 21
 10a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
 10e:	c2 fb       	bst	r28, 2
 110:	66 27       	eor	r22, r22
 112:	60 f9       	bld	r22, 0
 114:	86 e1       	ldi	r24, 0x16	; 22
 116:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
 11a:	c3 fb       	bst	r28, 3
 11c:	66 27       	eor	r22, r22
 11e:	60 f9       	bld	r22, 0
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <H_Lcd_Void_LCDWriteCommand+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <H_Lcd_Void_LCDWriteCommand+0xa6>
 138:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <M_DIO_Void_SetPinValue>
 142:	8f e1       	ldi	r24, 0x1F	; 31
 144:	9e e4       	ldi	r25, 0x4E	; 78
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <H_Lcd_Void_LCDWriteCommand+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <H_Lcd_Void_LCDWriteCommand+0xba>
 14c:	00 00       	nop
	_delay_ms(5);
#endif
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <H_Lcd_Void_LCDInit>:

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	84 e1       	ldi	r24, 0x14	; 20
 156:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	85 e1       	ldi	r24, 0x15	; 21
 15e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	86 e1       	ldi	r24, 0x16	; 22
 166:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	88 e1       	ldi	r24, 0x18	; 24
 16e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	8d e0       	ldi	r24, 0x0D	; 13
 176:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	8c e0       	ldi	r24, 0x0C	; 12
 17e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
 182:	83 e3       	ldi	r24, 0x33	; 51
 184:	0e 94 49 00 	call	0x92	; 0x92 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
 188:	82 e3       	ldi	r24, 0x32	; 50
 18a:	0e 94 49 00 	call	0x92	; 0x92 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
 18e:	88 e2       	ldi	r24, 0x28	; 40
 190:	0e 94 49 00 	call	0x92	; 0x92 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	0e 94 49 00 	call	0x92	; 0x92 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 49 00 	call	0x92	; 0x92 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <H_Lcd_Void_LCDWriteCommand>
 1a6:	08 95       	ret

000001a8 <main>:
#include "UART_Interface.h" 
#include "LCD_Interface.h"
#include "util/delay.h" 

int main(void)
{	
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	63 97       	sbiw	r28, 0x13	; 19
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
	u8 str [] = "UART TERMINAL TEST"; 
 1bc:	83 e1       	ldi	r24, 0x13	; 19
 1be:	e0 e6       	ldi	r30, 0x60	; 96
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	de 01       	movw	r26, r28
 1c4:	11 96       	adiw	r26, 0x01	; 1
 1c6:	01 90       	ld	r0, Z+
 1c8:	0d 92       	st	X+, r0
 1ca:	8a 95       	dec	r24
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x1e>
	H_Lcd_Void_LCDInit();
 1ce:	0e 94 a9 00 	call	0x152	; 0x152 <H_Lcd_Void_LCDInit>
	UART_Init();  
 1d2:	0e 94 02 02 	call	0x404	; 0x404 <UART_Init>
	UART_sendString(str);
 1d6:	ce 01       	movw	r24, r28
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	0e 94 12 02 	call	0x424	; 0x424 <UART_sendString>
 1de:	ff cf       	rjmp	.-2      	; 0x1de <main+0x36>

000001e0 <M_DIO_Void_SetPinDirection>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
 1e0:	9d ec       	ldi	r25, 0xCD	; 205
 1e2:	89 9f       	mul	r24, r25
 1e4:	91 2d       	mov	r25, r1
 1e6:	11 24       	eor	r1, r1
 1e8:	29 2f       	mov	r18, r25
 1ea:	26 95       	lsr	r18
 1ec:	26 95       	lsr	r18
 1ee:	26 95       	lsr	r18
 1f0:	22 0f       	add	r18, r18
 1f2:	32 2f       	mov	r19, r18
 1f4:	33 0f       	add	r19, r19
 1f6:	33 0f       	add	r19, r19
 1f8:	23 0f       	add	r18, r19
 1fa:	82 1b       	sub	r24, r18
 1fc:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
 1fe:	96 95       	lsr	r25
 200:	96 95       	lsr	r25
 202:	96 95       	lsr	r25
	switch(Copy_U8_State)
 204:	66 23       	and	r22, r22
 206:	19 f0       	breq	.+6      	; 0x20e <M_DIO_Void_SetPinDirection+0x2e>
 208:	61 30       	cpi	r22, 0x01	; 1
 20a:	e1 f1       	breq	.+120    	; 0x284 <M_DIO_Void_SetPinDirection+0xa4>
 20c:	08 95       	ret
	{
	case INPUT:
		switch(Local_U8_Group)
 20e:	92 30       	cpi	r25, 0x02	; 2
 210:	a9 f0       	breq	.+42     	; 0x23c <M_DIO_Void_SetPinDirection+0x5c>
 212:	18 f4       	brcc	.+6      	; 0x21a <M_DIO_Void_SetPinDirection+0x3a>
 214:	91 30       	cpi	r25, 0x01	; 1
 216:	31 f0       	breq	.+12     	; 0x224 <M_DIO_Void_SetPinDirection+0x44>
 218:	08 95       	ret
 21a:	93 30       	cpi	r25, 0x03	; 3
 21c:	d9 f0       	breq	.+54     	; 0x254 <M_DIO_Void_SetPinDirection+0x74>
 21e:	94 30       	cpi	r25, 0x04	; 4
 220:	29 f1       	breq	.+74     	; 0x26c <M_DIO_Void_SetPinDirection+0x8c>
 222:	08 95       	ret
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
 224:	3a b3       	in	r19, 0x1a	; 26
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <M_DIO_Void_SetPinDirection+0x50>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	2a 95       	dec	r18
 232:	e2 f7       	brpl	.-8      	; 0x22c <M_DIO_Void_SetPinDirection+0x4c>
 234:	80 95       	com	r24
 236:	83 23       	and	r24, r19
 238:	8a bb       	out	0x1a, r24	; 26
 23a:	08 95       	ret
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
 23c:	37 b3       	in	r19, 0x17	; 23
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <M_DIO_Void_SetPinDirection+0x68>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	2a 95       	dec	r18
 24a:	e2 f7       	brpl	.-8      	; 0x244 <M_DIO_Void_SetPinDirection+0x64>
 24c:	80 95       	com	r24
 24e:	83 23       	and	r24, r19
 250:	87 bb       	out	0x17, r24	; 23
 252:	08 95       	ret
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
 254:	34 b3       	in	r19, 0x14	; 20
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <M_DIO_Void_SetPinDirection+0x80>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	2a 95       	dec	r18
 262:	e2 f7       	brpl	.-8      	; 0x25c <M_DIO_Void_SetPinDirection+0x7c>
 264:	80 95       	com	r24
 266:	83 23       	and	r24, r19
 268:	84 bb       	out	0x14, r24	; 20
 26a:	08 95       	ret
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
 26c:	31 b3       	in	r19, 0x11	; 17
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <M_DIO_Void_SetPinDirection+0x98>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	2a 95       	dec	r18
 27a:	e2 f7       	brpl	.-8      	; 0x274 <M_DIO_Void_SetPinDirection+0x94>
 27c:	80 95       	com	r24
 27e:	83 23       	and	r24, r19
 280:	81 bb       	out	0x11, r24	; 17
 282:	08 95       	ret
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
 284:	92 30       	cpi	r25, 0x02	; 2
 286:	a1 f0       	breq	.+40     	; 0x2b0 <M_DIO_Void_SetPinDirection+0xd0>
 288:	18 f4       	brcc	.+6      	; 0x290 <M_DIO_Void_SetPinDirection+0xb0>
 28a:	91 30       	cpi	r25, 0x01	; 1
 28c:	31 f0       	breq	.+12     	; 0x29a <M_DIO_Void_SetPinDirection+0xba>
 28e:	08 95       	ret
 290:	93 30       	cpi	r25, 0x03	; 3
 292:	c9 f0       	breq	.+50     	; 0x2c6 <M_DIO_Void_SetPinDirection+0xe6>
 294:	94 30       	cpi	r25, 0x04	; 4
 296:	11 f1       	breq	.+68     	; 0x2dc <M_DIO_Void_SetPinDirection+0xfc>
 298:	08 95       	ret
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
 29a:	3a b3       	in	r19, 0x1a	; 26
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <M_DIO_Void_SetPinDirection+0xc6>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	2a 95       	dec	r18
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <M_DIO_Void_SetPinDirection+0xc2>
 2aa:	83 2b       	or	r24, r19
 2ac:	8a bb       	out	0x1a, r24	; 26
 2ae:	08 95       	ret
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
 2b0:	37 b3       	in	r19, 0x17	; 23
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <M_DIO_Void_SetPinDirection+0xdc>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	2a 95       	dec	r18
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <M_DIO_Void_SetPinDirection+0xd8>
 2c0:	83 2b       	or	r24, r19
 2c2:	87 bb       	out	0x17, r24	; 23
 2c4:	08 95       	ret
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
 2c6:	34 b3       	in	r19, 0x14	; 20
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <M_DIO_Void_SetPinDirection+0xf2>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	2a 95       	dec	r18
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <M_DIO_Void_SetPinDirection+0xee>
 2d6:	83 2b       	or	r24, r19
 2d8:	84 bb       	out	0x14, r24	; 20
 2da:	08 95       	ret
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
 2dc:	31 b3       	in	r19, 0x11	; 17
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <M_DIO_Void_SetPinDirection+0x108>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	2a 95       	dec	r18
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <M_DIO_Void_SetPinDirection+0x104>
 2ec:	83 2b       	or	r24, r19
 2ee:	81 bb       	out	0x11, r24	; 17
 2f0:	08 95       	ret

000002f2 <M_DIO_Void_SetPinValue>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
 2f2:	9d ec       	ldi	r25, 0xCD	; 205
 2f4:	89 9f       	mul	r24, r25
 2f6:	91 2d       	mov	r25, r1
 2f8:	11 24       	eor	r1, r1
 2fa:	29 2f       	mov	r18, r25
 2fc:	26 95       	lsr	r18
 2fe:	26 95       	lsr	r18
 300:	26 95       	lsr	r18
 302:	22 0f       	add	r18, r18
 304:	32 2f       	mov	r19, r18
 306:	33 0f       	add	r19, r19
 308:	33 0f       	add	r19, r19
 30a:	23 0f       	add	r18, r19
 30c:	82 1b       	sub	r24, r18
 30e:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
 310:	96 95       	lsr	r25
 312:	96 95       	lsr	r25
 314:	96 95       	lsr	r25
	switch(Copy_U8_State)
 316:	66 23       	and	r22, r22
 318:	19 f0       	breq	.+6      	; 0x320 <M_DIO_Void_SetPinValue+0x2e>
 31a:	61 30       	cpi	r22, 0x01	; 1
 31c:	e1 f1       	breq	.+120    	; 0x396 <M_DIO_Void_SetPinValue+0xa4>
 31e:	08 95       	ret
	{
	case LOW:
		switch(Local_U8_Group)
 320:	92 30       	cpi	r25, 0x02	; 2
 322:	a9 f0       	breq	.+42     	; 0x34e <M_DIO_Void_SetPinValue+0x5c>
 324:	18 f4       	brcc	.+6      	; 0x32c <M_DIO_Void_SetPinValue+0x3a>
 326:	91 30       	cpi	r25, 0x01	; 1
 328:	31 f0       	breq	.+12     	; 0x336 <M_DIO_Void_SetPinValue+0x44>
 32a:	08 95       	ret
 32c:	93 30       	cpi	r25, 0x03	; 3
 32e:	d9 f0       	breq	.+54     	; 0x366 <M_DIO_Void_SetPinValue+0x74>
 330:	94 30       	cpi	r25, 0x04	; 4
 332:	29 f1       	breq	.+74     	; 0x37e <M_DIO_Void_SetPinValue+0x8c>
 334:	08 95       	ret
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
 336:	3b b3       	in	r19, 0x1b	; 27
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <M_DIO_Void_SetPinValue+0x50>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	2a 95       	dec	r18
 344:	e2 f7       	brpl	.-8      	; 0x33e <M_DIO_Void_SetPinValue+0x4c>
 346:	80 95       	com	r24
 348:	83 23       	and	r24, r19
 34a:	8b bb       	out	0x1b, r24	; 27
 34c:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
 34e:	38 b3       	in	r19, 0x18	; 24
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <M_DIO_Void_SetPinValue+0x68>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	2a 95       	dec	r18
 35c:	e2 f7       	brpl	.-8      	; 0x356 <M_DIO_Void_SetPinValue+0x64>
 35e:	80 95       	com	r24
 360:	83 23       	and	r24, r19
 362:	88 bb       	out	0x18, r24	; 24
 364:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
 366:	35 b3       	in	r19, 0x15	; 21
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <M_DIO_Void_SetPinValue+0x80>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	2a 95       	dec	r18
 374:	e2 f7       	brpl	.-8      	; 0x36e <M_DIO_Void_SetPinValue+0x7c>
 376:	80 95       	com	r24
 378:	83 23       	and	r24, r19
 37a:	85 bb       	out	0x15, r24	; 21
 37c:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
 37e:	32 b3       	in	r19, 0x12	; 18
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <M_DIO_Void_SetPinValue+0x98>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	2a 95       	dec	r18
 38c:	e2 f7       	brpl	.-8      	; 0x386 <M_DIO_Void_SetPinValue+0x94>
 38e:	80 95       	com	r24
 390:	83 23       	and	r24, r19
 392:	82 bb       	out	0x12, r24	; 18
 394:	08 95       	ret
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
 396:	92 30       	cpi	r25, 0x02	; 2
 398:	a1 f0       	breq	.+40     	; 0x3c2 <M_DIO_Void_SetPinValue+0xd0>
 39a:	18 f4       	brcc	.+6      	; 0x3a2 <M_DIO_Void_SetPinValue+0xb0>
 39c:	91 30       	cpi	r25, 0x01	; 1
 39e:	31 f0       	breq	.+12     	; 0x3ac <M_DIO_Void_SetPinValue+0xba>
 3a0:	08 95       	ret
 3a2:	93 30       	cpi	r25, 0x03	; 3
 3a4:	c9 f0       	breq	.+50     	; 0x3d8 <M_DIO_Void_SetPinValue+0xe6>
 3a6:	94 30       	cpi	r25, 0x04	; 4
 3a8:	11 f1       	breq	.+68     	; 0x3ee <M_DIO_Void_SetPinValue+0xfc>
 3aa:	08 95       	ret
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
 3ac:	3b b3       	in	r19, 0x1b	; 27
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <M_DIO_Void_SetPinValue+0xc6>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	2a 95       	dec	r18
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <M_DIO_Void_SetPinValue+0xc2>
 3bc:	83 2b       	or	r24, r19
 3be:	8b bb       	out	0x1b, r24	; 27
 3c0:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
 3c2:	38 b3       	in	r19, 0x18	; 24
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <M_DIO_Void_SetPinValue+0xdc>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	2a 95       	dec	r18
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <M_DIO_Void_SetPinValue+0xd8>
 3d2:	83 2b       	or	r24, r19
 3d4:	88 bb       	out	0x18, r24	; 24
 3d6:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
 3d8:	35 b3       	in	r19, 0x15	; 21
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <M_DIO_Void_SetPinValue+0xf2>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	2a 95       	dec	r18
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <M_DIO_Void_SetPinValue+0xee>
 3e8:	83 2b       	or	r24, r19
 3ea:	85 bb       	out	0x15, r24	; 21
 3ec:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
 3ee:	32 b3       	in	r19, 0x12	; 18
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <M_DIO_Void_SetPinValue+0x108>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	2a 95       	dec	r18
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <M_DIO_Void_SetPinValue+0x104>
 3fe:	83 2b       	or	r24, r19
 400:	82 bb       	out	0x12, r24	; 18
 402:	08 95       	ret

00000404 <UART_Init>:
		/*WAIT UNTIL THE RECIEVER FLAG IS ONE*/
	}
	return (UDR);
}
void UART_receiveByteAsynchCallBack(void(*CpyPtr)(u8)){
	ptr_func = CpyPtr; 
 404:	83 e3       	ldi	r24, 0x33	; 51
 406:	89 b9       	out	0x09, r24	; 9
 408:	88 e9       	ldi	r24, 0x98	; 152
 40a:	8a b9       	out	0x0a, r24	; 10
 40c:	80 b5       	in	r24, 0x20	; 32
 40e:	80 68       	ori	r24, 0x80	; 128
 410:	80 bd       	out	0x20, r24	; 32
 412:	86 e8       	ldi	r24, 0x86	; 134
 414:	80 bd       	out	0x20, r24	; 32
 416:	08 95       	ret

00000418 <UART_sendByte>:
 418:	5d 9b       	sbis	0x0b, 5	; 11
 41a:	fe cf       	rjmp	.-4      	; 0x418 <UART_sendByte>
 41c:	8c b9       	out	0x0c, r24	; 12
 41e:	5e 9b       	sbis	0x0b, 6	; 11
 420:	fe cf       	rjmp	.-4      	; 0x41e <UART_sendByte+0x6>
 422:	08 95       	ret

00000424 <UART_sendString>:
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	8c 01       	movw	r16, r24
 42c:	c0 e0       	ldi	r28, 0x00	; 0
 42e:	03 c0       	rjmp	.+6      	; 0x436 <UART_sendString+0x12>
 430:	0e 94 0c 02 	call	0x418	; 0x418 <UART_sendByte>
 434:	cf 5f       	subi	r28, 0xFF	; 255
 436:	f8 01       	movw	r30, r16
 438:	ec 0f       	add	r30, r28
 43a:	f1 1d       	adc	r31, r1
 43c:	80 81       	ld	r24, Z
 43e:	81 11       	cpse	r24, r1
 440:	f7 cf       	rjmp	.-18     	; 0x430 <UART_sendString+0xc>
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	08 95       	ret

0000044a <__vector_13>:
} 

ISR(USART_RXC_vect){
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	ef 93       	push	r30
 46a:	ff 93       	push	r31
	ptr_func(UDR);
 46c:	8c b1       	in	r24, 0x0c	; 12
 46e:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 472:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 476:	09 95       	icall
}
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <_exit>:
 49a:	f8 94       	cli

0000049c <__stop_program>:
 49c:	ff cf       	rjmp	.-2      	; 0x49c <__stop_program>
